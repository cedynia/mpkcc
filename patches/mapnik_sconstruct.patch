--- SConstruct	2018-06-09 18:58:11.667541288 +0200
+++ ../SConstruct.patched	2018-06-09 21:42:31.196699560 +0200
@@ -1349,9 +1349,30 @@
         if not os.path.isdir(env['SYSTEM_FONTS']):
             color_print(1,'Warning: Directory specified for SYSTEM_FONTS does not exist!')
 
-    # Set up for libraries and headers dependency checks
-    env['CPPPATH'] = ['#include']
-    env['LIBPATH'] = ['#src','#src/json','#src/wkt']
+     # Set up for libraries and headers dependency checks
+    env['CPPPATH'] = [
+			'/home/pawel/wms_server_proejcts/android_crosscomp_mapnik/libxml2-2.9.0/include/libxml/',
+			'/home/pawel/wms_server_proejcts/android_crosscomp_mapnik/libpng/include/',
+			'/home/pawel/wms_server_proejcts/android_crosscomp_mapnik/zlib/include/',
+			'/home/pawel/wms_server_proejcts/android_crosscomp_mapnik/libtool/include/',
+			'/home/pawel/wms_server_proejcts/android_crosscomp_mapnik/libtiff/include/',
+			'/home/pawel/wms_server_proejcts/android_crosscomp_mapnik/libproj4/include/',
+			'/home/pawel/wms_server_proejcts/android_crosscomp_mapnik/icu/include/',
+			'/home/pawel/wms_server_proejcts/android_crosscomp_mapnik/jpglib/include/',
+			'/home/pawel/wms_server_proejcts/android_crosscomp_mapnik/harfbuzz/include/'
+			]
+    env['LIBPATH'] = [
+			'/home/pawel/wms_server_proejcts/android_crosscomp_mapnik/freetype/lib/',
+			'/home/pawel/wms_server_proejcts/android_crosscomp_mapnik/xml2/',
+			'/home/pawel/wms_server_proejcts/android_crosscomp_mapnik/libpng/lib/',
+			'/home/pawel/wms_server_proejcts/android_crosscomp_mapnik/zlib/lib/',
+			'/home/pawel/wms_server_proejcts/android_crosscomp_mapnik/libtool/lib/',
+			'/home/pawel/wms_server_proejcts/android_crosscomp_mapnik/libtiff/lib/',
+			'/home/pawel/wms_server_proejcts/android_crosscomp_mapnik/libproj4/lib/',
+			'/home/pawel/wms_server_proejcts/android_crosscomp_mapnik/icu/lib/',
+			'/home/pawel/wms_server_proejcts/android_crosscomp_mapnik/jpglib/lib/',
+			'/home/pawel/wms_server_proejcts/android_crosscomp_mapnik/harfbuzz/lib/'
+			]
 
     # set any custom cxxflags and ldflags to come first
     if sys.platform == 'darwin' and not env['HOST']:
@@ -1362,6 +1383,7 @@
     env.Append(CXXFLAGS = env['CUSTOM_CXXFLAGS'])
     env.Append(CFLAGS = env['CUSTOM_CFLAGS'])
     env.Append(LINKFLAGS = DEFAULT_CXX14_LINKFLAGS)
+    env['CUSTOM_LDFLAGS']='-static-libstdc++'
     env.Append(LINKFLAGS = env['CUSTOM_LDFLAGS'])
 
     ### platform specific bits
@@ -1512,9 +1534,9 @@
         conf.prioritize_paths(silent=True)
 
     # test for C++14 support, which is required
-    if not env['HOST'] and not conf.supports_cxx14():
-        color_print(1,"C++ compiler does not support C++14 standard (-std=c++14), which is required. Please upgrade your compiler")
-        Exit(1)
+   # if not env['HOST'] and not conf.supports_cxx14():
+    #    color_print(1,"C++ compiler does not support C++14 standard (-std=c++14), which is required. Please upgrade your compiler")
+    #    Exit(1)
 
     if not env['HOST']:
         for libname, headers, required, lang in REQUIRED_LIBSHEADERS:
@@ -1525,17 +1547,17 @@
                 else:
                     color_print(4, 'Could not find optional header or shared library for %s' % libname)
                     env['SKIPPED_DEPS'].append(libname)
-            else:
-                if libname == env['ICU_LIB_NAME']:
-                    if env['ICU_LIB_NAME'] not in env['MISSING_DEPS']:
-                        if not conf.icu_at_least_four_two():
-                            # expression_string.cpp and map.cpp use fromUTF* function only available in >= ICU 4.2
-                            env['MISSING_DEPS'].append(env['ICU_LIB_NAME'])
-                elif libname == 'harfbuzz':
-                    if not conf.harfbuzz_version():
-                        env['SKIPPED_DEPS'].append('harfbuzz-min-version')
-                    if not conf.harfbuzz_with_freetype_support():
-                        env['MISSING_DEPS'].append('harfbuzz-with-freetype-support')
+           # else:
+           #     if libname == env['ICU_LIB_NAME']:
+            #        if env['ICU_LIB_NAME'] not in env['MISSING_DEPS']:
+            #            if not conf.icu_at_least_four_two():
+           #                 # expression_string.cpp and map.cpp use fromUTF* function only available in >= ICU 4.2
+           #                 env['MISSING_DEPS'].append(env['ICU_LIB_NAME'])
+           #     elif libname == 'harfbuzz':
+           #         if not conf.harfbuzz_version():
+           #             env['SKIPPED_DEPS'].append('harfbuzz-min-version')
+           #         if not conf.harfbuzz_with_freetype_support():
+            #            env['MISSING_DEPS'].append('harfbuzz-with-freetype-support')
 
     if env['BIGINT']:
         env.Append(CPPDEFINES = '-DBIGINT')
@@ -1569,16 +1591,16 @@
         if env['PRIORITIZE_LINKING']:
             conf.prioritize_paths(silent=True)
 
-        if not env['HOST']:
+        #if not env['HOST']:
             # if the user is not setting custom boost configuration
             # enforce boost version greater than or equal to BOOST_MIN_VERSION
-            if not conf.CheckBoost(BOOST_MIN_VERSION):
-                color_print(4,'Found boost lib version... %s' % env.get('BOOST_LIB_VERSION_FROM_HEADER') )
-                color_print(1,'Boost version %s or greater is required' % BOOST_MIN_VERSION)
-                if not env['BOOST_VERSION']:
-                    env['MISSING_DEPS'].append('boost version >= %s' % BOOST_MIN_VERSION)
-            else:
-                color_print(4,'Found boost lib version... %s' % env.get('BOOST_LIB_VERSION_FROM_HEADER') )
+          # if not conf.CheckBoost(BOOST_MIN_VERSION):
+           #     color_print(4,'Found boost lib version... %s' % env.get('BOOST_LIB_VERSION_FROM_HEADER') )
+           #     color_print(1,'Boost version %s or greater is required' % BOOST_MIN_VERSION)
+           #     if not env['BOOST_VERSION']:
+           #         env['MISSING_DEPS'].append('boost version >= %s' % BOOST_MIN_VERSION)
+          #  else:
+           #     color_print(4,'Found boost lib version... %s' % env.get('BOOST_LIB_VERSION_FROM_HEADER') )
 
         if not env['HOST']:
             for count, libinfo in enumerate(BOOST_LIBSHEADERS):
@@ -1596,13 +1618,13 @@
         # just turn it off like this, but seems the only available work-
         # around. See https://svn.boost.org/trac/boost/ticket/6779 for more
         # details.
-        if not env['HOST']:
-            boost_version = [int(x) for x in env.get('BOOST_LIB_VERSION_FROM_HEADER').split('_')]
-            if not conf.CheckBoostScopedEnum():
-                if boost_version < [1, 51]:
-                    env.Append(CXXFLAGS = '-DBOOST_NO_SCOPED_ENUMS')
-                elif boost_version < [1, 57]:
-                    env.Append(CXXFLAGS = '-DBOOST_NO_CXX11_SCOPED_ENUMS')
+        #if not env['HOST']:
+         #   boost_version = [int(x) for x in env.get('BOOST_LIB_VERSION_FROM_HEADER').split('_')]
+         #   if not conf.CheckBoostScopedEnum():
+         #       if boost_version < [1, 51]:
+         #           env.Append(CXXFLAGS = '-DBOOST_NO_SCOPED_ENUMS')
+         #       elif boost_version < [1, 57]:
+         #           env.Append(CXXFLAGS = '-DBOOST_NO_CXX11_SCOPED_ENUMS')
 
     if not env['HOST'] and env['ICU_LIB_NAME'] not in env['MISSING_DEPS']:
         # http://lists.boost.org/Archives/boost/2009/03/150076.php
@@ -2158,9 +2180,9 @@
                     os.unlink(plugin_path)
 
     # Build the c++ rundemo app if requested
-    if not env['HOST']:
-        if env['DEMO']:
-            SConscript('demo/c++/build.py')
+   # if not env['HOST']:
+       # if env['DEMO']:
+        #    SConscript('demo/c++/build.py')
 
     # Build shapeindex and remove its dependency from the LIBS
     if not env['HOST']:
